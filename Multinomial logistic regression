---
title: "Multinomial Logistic Regression"
author: "SARIFFUDDIN"
date: "12/07/2021"
output: rmdformats::readthedown
#Src1: https://cran.r-project.org/web/packages/cvms/vignettes/Creating_a_confusion_matrix.html
#Src2: https://rpubs.com/beane/n4_2
#Src3: https://cran.r-project.org/web/packages/sjPlot/vignettes/tab_model_estimates.html
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
require(sf)
library(stringr)
library(dplyr)
library(ggplot2)
library(nnet)
library(circlize)
```

```{r}
shape <- read_sf(dsn = "persil_dissolve.shp")
shape <- as.data.frame(shape)

# Building area > 20 m2

dataHistory <- read.csv("dataHistoryFull.csv")
names(dataHistory)[1] <- 'nop'
dataHistoryLuas <- transmute(dataHistory,
                             nop, 
                             LUAS_BNG_SPPT = as.numeric(LUAS_BNG_SPPT)) %>% 
                    filter(LUAS_BNG_SPPT > 20) %>% 
                    distinct() 

# Join parcel data with building area (NA removed)
shape1 <- left_join(shape, dataHistoryLuas, by = c("D_NOP" = "nop"))
shape1 <- filter(shape1, !is.na(LUAS_BNG_SPPT))
```
# Visualize relocation

```{r}
# Read the data
data <- read.csv("basic_migrasi.csv")

data <- data %>% mutate(nop_asal = str_replace(nop_asal, "AA", "33"),
                nop_tujuan = str_replace(nop_tujuan, "AA", "33"))
```

```{r}
rs <- read.csv("basic_migrasi.csv")
rs <- rs[, c(1:5)]
rs <- rs %>% mutate(KD_KECAMATAN_ASAL = as.integer(substr(nop_asal, 6, 7)),
                    KD_KELURAHAN_ASAL = as.integer(substr(nop_asal, 8, 10)),
                    KD_KECAMATAN_TUJUAN = as.integer(substr(nop_tujuan, 6, 7)),
                    KD_KELURAHAN_TUJUAN = as.integer(substr(nop_tujuan, 8, 10))) 

kode <- read.csv("kode.csv", sep = ";")

rs <- left_join(rs, kode,by = c("KD_KECAMATAN_ASAL" = "KD_KECAMATAN", 
                                "KD_KELURAHAN_ASAL" = "KD_KELURAHAN")) 
rs <- rs[,-11]
names(rs)[10:12] <- c("KECAMATAN_ASAL", "KELURAHAN_ASAL", "FLOOD_STATUS_ASAL")

rs <- left_join(rs, kode,by = c("KD_KECAMATAN_TUJUAN" = "KD_KECAMATAN", 
                                "KD_KELURAHAN_TUJUAN" = "KD_KELURAHAN")) 
rs <- rs[,-14]
names(rs)[13:15] <- c("KECAMATAN_TUJUAN", "KELURAHAN_TUJUAN", "FLOOD_STATUS_TUJUAN")

rs <- rs %>% mutate(FLOOD_STATUS_ASAL = ifelse(FLOOD_STATUS_ASAL == "FLOODED",
                                               "RISKY AREA", "SAFE AREA"),
                    FLOOD_STATUS_TUJUAN = ifelse(FLOOD_STATUS_TUJUAN == "FLOODED",
                                                 "RISKY AREA", "SAFE AREA"))

# Data Visualization
vizData <- rs[, c(12, 10, 15, 13)]

wil = c(structure(vizData[,1], names=vizData[,2]),
          structure(vizData[,3], names= vizData[,4]))
wil = wil[!duplicated(names(wil))]
wil = wil[order(wil, names(wil))]
wil_color = structure(2:(length(unique(wil))+1), names = unique(wil))
model_color = structure(2:(length(names(wil))+1), names = names(wil))

gap.degree = do.call("c", lapply(table(wil), function(i) c(rep(2, i-1), 8)))
circos.par(gap.degree = gap.degree)

chordDiagram(vizData[, c(2, 4)], 
             order = names(wil), 
             grid.col = model_color,
             directional = 1, 
             annotationTrack = "grid", 
             direction.type = c("arrows", "diffHeight"),
             link.arr.type = "big.arrow",
             preAllocateTracks = list(
                 list(track.height = 0.02)))

circos.trackPlotRegion(track.index = 2, panel.fun = function(x, y) {
    xlim = get.cell.meta.data("xlim")
    ylim = get.cell.meta.data("ylim")
    sector.index = get.cell.meta.data("sector.index")
    circos.text(mean(xlim), mean(ylim), sector.index, col = "white", cex = 0.6, facing = "inside", niceFacing = TRUE)
}, bg.border = NA)

for(b in unique(wil)) {
    model = names(wil[wil == b])
    highlight.sector(sector.index = model, track.index = 1, col = wil_color[b], 
                     text = b, text.vjust = -1, niceFacing = TRUE)
}

circos.clear()
```

```{r}
dt_shape <- shape1 %>% select(D_NOP, Flooded, LandSub, Slope) 
dt <- left_join(data, dt_shape, by = c("nop_asal" = "D_NOP"))
names(dt)[16:18] <- c("Flooded_asal", "LandSub_asal", "slope_asal")
dt <- left_join(dt, dt_shape, by = c("nop_tujuan" = "D_NOP"))
names(dt)[19:21] <- c("Flooded_tujuan", "LandSub_tujuan", "slope_tujuan")

dt <- dt %>% filter(!is.na(Flooded_asal), !is.na(Flooded_tujuan))
```

```{r}
#Mengambil nop yang sudah ada pada data perpindahan
nop_asal <- dt %>% distinct(nop_asal)
names(nop_asal) <- c("nop")
nop_tujuan <- distinct(dt, nop_tujuan)
names(nop_tujuan) <- c("nop")

nop_moved <- rbind(nop_asal, nop_tujuan)
nop_moved <- distinct(nop_moved, nop)

#mengambil nop yang tidak berpindah
unmoved <- shape1 %>% filter(!(D_NOP %in% nop_moved$nop))

dt_unmoved <- data.frame(NM_WP_SPPT = rep(NA, nrow(unmoved)),
                         nop_asal = unmoved$D_NOP,
                         rentang_waktu_asal = rep(NA, nrow(unmoved)),
                         nop_tujuan = unmoved$D_NOP,
                         rentang_waktu_tujuan = rep(NA, nrow(unmoved)),
                         KD_KECAMATAN_ASAL = rep(NA, nrow(unmoved)),
                         KD_KELURAHAN_ASAL = rep(NA, nrow(unmoved)),
                         KD_KECAMATAN_TUJUAN = rep(NA, nrow(unmoved)),
                         KD_KELURAHAN_TUJUAN = rep(NA, nrow(unmoved)),
                         KECAMATAN_ASAL = rep(NA, nrow(unmoved)),
                         KELURAHAN_ASAL = rep(NA, nrow(unmoved)),
                         FLOOD_STATUS_ASAL = rep(NA, nrow(unmoved)),
                         KECAMATAN_TUJUAN = rep(NA, nrow(unmoved)),
                         KELURAHAN_TUJUAN = rep(NA, nrow(unmoved)),
                         FLOOD_STATUS_TUJUAN = rep(NA, nrow(unmoved)),
                         Flooded_asal = unmoved$Flooded,
                         LandSub_asal = unmoved$LandSub,
                         slope_asal = unmoved$Slope,
                         Flooded_tujuan = unmoved$Flooded,
                         LandSub_tujuan = unmoved$LandSub,
                         slope_tujuan = unmoved$Slope)

fulldt <- rbind(dt, dt_unmoved)
write.csv(fulldt, "fulldt.csv", row.names = F)
```

```{r}
fulldt <- mutate(fulldt, 
                 mig = if_else(Flooded_asal == 1 & Flooded_tujuan == 1, 1, 0), #risk to risk
                 mig = if_else(Flooded_asal == 1 & Flooded_tujuan == 0, 2, mig), #risk to safe
                 mig = if_else(Flooded_asal == 0 & Flooded_tujuan == 1, 3, mig), #safe to risk
                 mig = if_else(Flooded_asal == 0 & Flooded_tujuan == 0, 4, mig), #safe to safe
                 mig = if_else(nop_asal == nop_tujuan, 0, mig),
                 mig_cat = if_else(Flooded_asal == 1 & Flooded_tujuan == 1, "risk to risk", ""),
                 mig_cat = if_else(Flooded_asal == 1 & Flooded_tujuan == 0, "risk to safe", mig_cat),
                 mig_cat = if_else(Flooded_asal == 0 & Flooded_tujuan == 1, "safe to risk", mig_cat), 
                 mig_cat = if_else(Flooded_asal == 0 & Flooded_tujuan == 0, "safe to safe", mig_cat),
                 mig_cat = if_else(nop_asal == nop_tujuan, "not moved", mig_cat),
                 Landsub_asal_num = as.numeric(str_split(LandSub_asal, " - ")[[1]][1]),
                 Landsub_tujuan_num = as.numeric(str_split(LandSub_tujuan, " - ")[[1]][1]),
                 slope_asal_num = as.numeric(str_split(slope_asal, "-")[[1]][1]),
                 slope_tujuan_num = as.numeric(str_split(slope_tujuan, "-")[[1]][1])
                )

```

```{r}
set.seed(412)
```

# X variables: destination only

```{r}
datamlr <- fulldt
datamlr$mig <- as.factor(datamlr$mig)

ind <- sample(2, nrow(datamlr),
              replace = T,
              prob = c(0.8, 0.2))

training <- datamlr[ind == 1,]
testing <- datamlr[ind == 2,]
```

## Create Model

```{r}
training$mig <- relevel(training$mig, ref = "0")
mymodel <- multinom(mig ~
                        Flooded_tujuan +
                        slope_tujuan_num + 
                        Landsub_tujuan_num, 
                    data = training)
summary(mymodel)
```

## P-value

```{r}
chi <- summary(mymodel)$coefficients/summary(mymodel)$standard.errors
pvalue <- pchisq(chi, 4)
pvalue


```

Signifikan ketika nilai p-value kurang dari 0.05


## Confusion matrix

### Training

```{r}
pred <- predict(mymodel, training)
tab <- table(pred, training$mig)
tab
accuration <- sum(diag(tab))/sum(tab)
accuration
```

### Testing

```{r}
predtes <- predict(mymodel, testing)
tabtes <- table(predtes, testing$mig)
tabtes
accuration <- sum(diag(tabtes))/sum(tabtes)
accuration
```

# X variables: origin and destination

```{r}
ind <- sample(2, nrow(datamlr),
              replace = T,
              prob = c(0.8, 0.2))

training <- datamlr[ind == 1,]
testing <- datamlr[ind == 2,]
```

## Create model

```{r}
training$mig <- relevel(training$mig, ref = "0")
mymodel1 <- multinom(mig ~
                        Flooded_asal +
                        slope_asal_num + 
                        Landsub_asal_num +
                        Flooded_tujuan +
                        slope_tujuan_num + 
                        Landsub_tujuan_num, 
                    data = training)
summary(mymodel1)
```

## P-value

```{r}
chi <- summary(mymodel1)$coefficients/summary(mymodel1)$standard.errors
pvalue <- pchisq(chi, 7)
pvalue


```

Signifikan ketika nilai p-value kurang dari 0.05

## Confusion matrix

### Training

```{r}
pred <- predict(mymodel1, training)
tab <- table(pred, training$mig)
tab
accuration <- sum(diag(tab))/sum(tab)
accuration
```

### Testing

```{r}
predtes <- predict(mymodel1, testing)
tabtes <- table(predtes, testing$mig)
tabtes
accuration <- sum(diag(tabtes))/sum(tabtes)
accuration
```

# X variables: destination only (relocation data only)

```{r}
moveddt <- filter(fulldt, mig != 0)  
#str(moveddt)
moveddt$mig <- as.factor(moveddt$mig)
ind <- sample(2, nrow(moveddt),
              replace = T,
              prob = c(0.8, 0.2))

training <- moveddt[ind == 1,]
testing <- moveddt[ind == 2,]
```

## Create model

```{r}
training$mig <- relevel(training$mig, ref = "1")
mymodel2 <- multinom(mig ~
                        Flooded_tujuan +
                        slope_tujuan_num + 
                        Landsub_tujuan_num, 
                    data = training)
summary(mymodel2)
```

## P-value

```{r}
chi <- summary(mymodel2)$coefficients/summary(mymodel2)$standard.errors
pvalue <- pchisq(chi, 4)
pvalue


```

Signifikan ketika nilai p-value kurang dari 0.05

## Confusion matrix

### Training

```{r}
pred <- predict(mymodel2, training)
tab <- table(pred, training$mig)
tab
accuration <- sum(diag(tab))/sum(tab)
accuration
```

### Testing

```{r}
predtes <- predict(mymodel2, testing)
tabtes <- table(predtes, testing$mig)
tabtes
accuration <- sum(diag(tabtes))/sum(tabtes)
accuration
```

# X variables: origin and destination (relocation data only)

```{r}
moveddt <- filter(fulldt, mig != 0)  
#str(moveddt)
moveddt$mig <- as.factor(moveddt$mig)
ind <- sample(2, nrow(moveddt),
              replace = T,
              prob = c(0.8, 0.2))

training <- moveddt[ind == 1,]
testing <- moveddt[ind == 2,]
```

## Create model

```{r}
training$mig <- relevel(training$mig, ref = "1")
mymodel3 <- multinom(mig ~
                        Flooded_asal +
                        slope_asal_num + 
                        Landsub_asal_num +
                        Flooded_tujuan +
                        slope_tujuan_num + 
                        Landsub_tujuan_num, 
                    data = training)
summary(mymodel3)

```

## P-value

```{r}
chi <- (summary(mymodel3)$coefficients^2)/summary(mymodel3)$standard.errors
pvalue <- pchisq(chi, 7)
pvalue

```

Signifikan ketika nilai p-value kurang dari 0.05

## Confusion matrix

### Training

```{r}
pred <- predict(mymodel3, training)
tab <- table(pred, training$mig)
tab
accuration <- sum(diag(tab))/sum(tab)
accuration
```

### Testing

```{r}
predtes <- predict(mymodel3, testing)
tabtes <- table(predtes, testing$mig)
tabtes
accuration <- sum(diag(tabtes))/sum(tabtes)
accuration
```
### Confidence Interval

```{r}
confint(mymodel3)
```

### Odds Ratio

```{r}
exp(coef(mymodel3))
```


```{r}
#Land Subsidence Tujuan
fulldt %>% 
    filter(mig > 0) %>% 
    group_by(LandSub_tujuan, mig) %>% 
    count() %>% 
    ggplot()+
    geom_col(aes(y = LandSub_tujuan, x = n))+
    facet_grid(cols = vars(mig))

fulldt %>% distinct(LandSub_tujuan)

#Land Subsidence Asal
fulldt %>% 
    filter(mig > 0) %>% 
    group_by(LandSub_asal, mig) %>% 
    count() %>% 
    ggplot()+
    geom_col(aes(y = LandSub_asal, x = n))+
    facet_grid(cols = vars(mig))

fulldt %>% distinct(LandSub_asal)

#Land Slope Tujuan
fulldt %>% 
    filter(mig > 0) %>% 
    group_by(slope_tujuan, mig) %>% 
    count() %>% 
    ggplot()+
    geom_col(aes(y = slope_tujuan, x = n))+
    facet_grid(cols = vars(mig))

fulldt %>% distinct(slope_tujuan)

#Land Slope Asal
fulldt %>% 
    filter(mig > 0) %>% 
    group_by(slope_asal, mig) %>% 
    count() %>% 
    ggplot()+
    geom_col(aes(y = slope_asal, x = n))+
    facet_grid(cols = vars(mig))

fulldt %>% distinct(slope_asal)
```
